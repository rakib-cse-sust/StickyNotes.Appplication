// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StickyNotes.Persistence;

#nullable disable

namespace StickyNotes.Persistence.Migrations
{
    [DbContext(typeof(StickyNotesDbContext))]
    partial class StickyNotesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StickyNotes.Domain.Entities.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            NoteId = 1,
                            CreatedDate = new DateTime(2023, 4, 10, 18, 20, 30, 677, DateTimeKind.Local).AddTicks(132),
                            IsActive = true,
                            LastModifiedDate = new DateTime(2023, 4, 10, 18, 20, 30, 677, DateTimeKind.Local).AddTicks(133),
                            NoteDescription = "Test note description 1",
                            NoteName = "Test note 1",
                            UserId = 1
                        },
                        new
                        {
                            NoteId = 2,
                            CreatedDate = new DateTime(2023, 4, 10, 18, 20, 30, 677, DateTimeKind.Local).AddTicks(141),
                            IsActive = true,
                            LastModifiedDate = new DateTime(2023, 4, 10, 18, 20, 30, 677, DateTimeKind.Local).AddTicks(142),
                            NoteDescription = "Test note description 2",
                            NoteName = "Test note 2",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("StickyNotes.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2023, 4, 10, 18, 20, 30, 677, DateTimeKind.Local).AddTicks(68),
                            LastModifiedDate = new DateTime(2023, 4, 10, 18, 20, 30, 677, DateTimeKind.Local).AddTicks(104),
                            UserFullName = "Rakib Khan",
                            UserName = "rakib.cse.sust@gmail.com"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2023, 4, 10, 18, 20, 30, 677, DateTimeKind.Local).AddTicks(122),
                            LastModifiedDate = new DateTime(2023, 4, 10, 18, 20, 30, 677, DateTimeKind.Local).AddTicks(124),
                            UserFullName = "Jahan Khan",
                            UserName = "rakib.jahan.khan@gmail.com"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
